#define _DEFAULT_SOURCE
#define _POSIX_C_SOURCE 200809L
#define BUF_SIZE 100
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

struct header {
  uint64_t size;
  struct header *next;
};

void print_out(char *format, void *data, size_t data_size) {
  char buf[BUF_SIZE];
  ssize_t len;

  if (data_size == sizeof(uint64_t)) {
    len = snprintf(buf, BUF_SIZE, format, *(uint64_t *)data);
  } else {
    len = snprintf(buf, BUF_SIZE, format, *(void **)data);
  }

  if (len < 0) {
    perror("snprintf");
    return;
  }

  write(STDOUT_FILENO, buf, len);
}

int main() {
  int blocksize = 128;
  void *start = sbrk(0);
  void *something = sbrk(blocksize * 2);

  printf("%p\n", start);
  printf("%p\n", something);

  struct header *h1 = (struct header *)start;
  struct header *h2 = (struct header *)start + blocksize;

  void *d1 = h1 + sizeof(struct header);
  void *d2 = h2 + sizeof(struct header);

  h1->next = NULL;
  h2->next = h1;

  memset(d1, 0, blocksize - sizeof(struct header));
  memset(d2, 1, blocksize - sizeof(struct header));

  print_out("first block:        %p\n", h1, sizeof(h1));
  print_out("second block:       %p\n", h2, sizeof(h2));
  print_out("first block size:   %i\n", &blocksize, sizeof(&blocksize));
  print_out("first block next:   %p\n", h2, sizeof(h2));
  print_out("second block size:  %i\n", &blocksize, sizeof(&blocksize));
  print_out("second block next:  %p\n", h2, sizeof(h2));

  h2->next = h1;
}
